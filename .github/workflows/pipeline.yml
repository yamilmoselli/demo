name: CI/CD pipeline

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build-and-test:

    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4

    - name: Notificar a Slack pull request recibido
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":" Nuevo pull request hacia *master*"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}      

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Notificar a Slack tests unitarios iniciados
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Se están ejecutando los tests unitarios..."}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}        

    - name: Build and execute unit tests with Maven
      id: unitTests
      run: mvn -B package

    - name: Notificar a Slack tests unitarios superados
      if: steps.unitTests.outcome == 'success'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Los tests unitarios *NO encontraron errores*"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notificar a Slack tests unitarios fallidos
      if: steps.unitTests.outcome == 'failure'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Los tests unitarios *SÍ encontraron errores*. Merge hacia master *prohibido*.\
        Escaneo de SonarQubeCloud cancelado. Abortando deploy"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notificar a Slack escaneo de SonarQube Cloud iniciado
      if: steps.unitTests.outcome == 'success'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Se está ejecutando el escaneo de SonarQube Cloud..."}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}        

    - name: SonarQube Cloud Scan
      if: steps.unitTests.outcome == 'success'
      id: sonar
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
        -Dsonar.projectKey=yamilmoselli_demo \
        -Dsonar.organization=yamilmoselli \
        -Dsonar.host.url=https://sonarcloud.io

    - name: Notificar a Slack escaneo de SonarQubeCloud exitoso
      if: steps.sonar.outcome == 'success'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"El escaneo de SonarQubeCloud *SUPERA los estándares de calidad*.\
        https://sonarcloud.io/project/overview?id=yamilmoselli_demo"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notificar a Slack escaneo de SonarQubeCloud fallido
      if: steps.sonar.outcome == 'failure'
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"El escaneo de SonarQubeCloud *NO SUPERA los estándares de calidad*.\
        Merge hacia master *prohibido*.Abortando deploy. https://sonarcloud.io/project/overview?id=yamilmoselli_demo"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}
        

  deploy:

    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:

    - uses: actions/checkout@v4

    - name: Notificar a Slack merge hacia master exitoso
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Merge hacia *master* exitoso"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}      
        
    - name: Notificar a Slack despliegue iniciado
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data '{"text":"Iniciando despliegue en Render... aguarde unos segundos e ingrese desde: https://demo-f9ag.onrender.com"}' \
        ${{ secrets.SLACK_WEBHOOK_URL }}        

    - name: Deploy con Render
      if: success()
      run : |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

